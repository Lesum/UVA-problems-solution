import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.StringTokenizer;
import java.io.PrintWriter;
import java.io.IOException;
public class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PrintWriter output = new PrintWriter(System.out);
    StringTokenizer st = null;
    while (true) {
      st = new StringTokenizer(br.readLine());
      int x = Integer.parseInt(st.nextToken());
      int y = Integer.parseInt(st.nextToken());
      if (x + y == 0) {
        break;
      }
      char[][] first = new char[x][x];
      for (int i = 0; i < x; i++) {
        char[] line = br.readLine().toCharArray();
        for (int j = 0; j < x; j++) {
          first[i][j] = line[j];
        }
      }
      char[][] second = new char[y][y];
      for (int i = 0; i < y; i++) {
        char[] line = br.readLine().toCharArray();
        for (int j = 0; j < y; j++) {
          second[i][j] = line[j];
        }
      }
      System.out.print(solve(first, second) + " ");
      rotate(second);
      System.out.print(solve(first, second) + " ");
      rotate(second);
      System.out.print(solve(first, second) + " ");
      rotate(second);
      System.out.println(solve(first, second));
    }
    output.close();
    br.close();
  }
  
  private static void rotate(char[][] m) {
    int n = m.length;
    for (int i = 0; i < n / 2; i++) {
      for (int j = 0; j < (n + 1) / 2; j++) {
        char ch = m[i][j];
        m[i][j] = m[n - 1 - j][i];
        m[n - 1 - j][i] = m[n - 1 - i][n - 1 - j];
        m[n - 1 - i][n - 1 - j] = m[j][n - 1 - i];
        m[j][n - 1 - i] = ch;
      }
    }
  }

private static int solve(char[][] first, char[][] second) {
    int answer = 0;
    for (int i = 0; i <= first.length - second.length; i++) {
      for (int j = 0; j <= first.length - second.length; j++) {
        if (first[i][j] == second[0][0]) {
          boolean bol = true;
          for (int k = 0; k < second.length; k++) {
            for (int l = 0; l < second.length; l++) {
              if (first[i + k][j + l] != second[k][l]) {
                bol = false;
                break;
              }
            }
          }
          if (bol) {
            answer++;
          }
        }
      }
    }
    return answer;
  }
}
